
Zero modes
================


These examples illustrate the conditions to get a zero-mode, its properties, and how to amplify it.

.. note::
    Throughout the examples, the A sublattice displays a positive imaginary onsite energy (amplification) and the sublattice B a negative imaginary onsite energy (absorption) such than :math:`\bar{\epsilon}_a=-\bar{\epsilon}_b`.


The chain is composed of :math:`n+1` sites A and :math:`n` sites B, starts and ends with an A site. The odd number of sites breaks the sublattice symmetry (one extra A site) resulting in the existence of a zero-mode fully polarized on the A sublattice: :math:`\langle A|A \rangle=1`, :math:`\langle B|B \rangle=0`, and energie :math:`\Im(\epsilon_a)`.

.. image:: ../TBfig/chain_n21/lattice_t(2+0j)_ea0,2j_eb-0,2j.png
    :height: 80px
    :width: 100%
    :align: center

Identical hoppings
------------------------------------------


.. code-block:: python

    from chainTB import *
    tags = [b'a', b'b']
    ri = [[0, 0], [1, 0]]
    pv = [[2, 0], [2, 0]]
    on = [0.2j, -0.2j]
    n = 21
    ta = 2.
    chain_tb = latticeTB(tags=tags, ri=ri, pv=pv)
    chain_tb.get_lattice(nx=n, ny=1)
    # solve eigenvalue problem
    eig_chain = eigChain(lat=chain_tb)
    eig_chain.set_onsite(on=on)
    eig_chain.set_hop(ta=ta)
    eig_chain.get_ham()
    eig_chain.get_eig()
    zero_mode = eig_chain.get_state_pola(b'a')
    # plots
    plot_chain = plotChain(sys=eig_chain)
    fig_dispersion = plot_chain.plt_dispersion(ta=ta)
    fig_lattice = plot_chain.plt_lattice(ms=15, fs=20, figsize=(10, 1))
    fig_spec = plot_chain.plt_spec(ms=20, pola_tag=b'a')
    fig_zero_mode = plot_chain.plt_intensity1d(zero_mode, ms=20)
    #propagation
    prop_chain = propagationTB(coor=eig_chain.coor, steps=1400, dz=0.05)
    psi_init =  np.ones(eig_chain.sites) / np.sqrt(eig_chain.sites)
    prop_chain.get_prop(ham=eig_chain.ham, psi_init=psi_init, norm=True)
    fig_prop = prop_chain.plt_prop1d()
    # save figures
    save_chain = saveFigTB(sys=eig_chain, hop_tags=['t'], hop=[ta], dir_name='chain', ext='png')
    save_chain.save_fig(fig_lattice, 'lattice')
    save_chain.save_fig(fig_dispersion, 'dispersion')
    save_chain.save_fig(fig_spec, 'spec')
    save_chain.save_fig(fig_zero_mode, 'zero_mode')
    save_chain.save_fig(fig_prop, 'prop')

.. image:: ../TBfig/chain_n21/dispersion_t(2+0j)_ea0,2j_eb-0,2j.png
    :width: 45%
.. image:: ../TBfig/chain_n21/spec_t(2+0j)_ea0,2j_eb-0,2j.png
    :width: 45%
.. image:: ../TBfig/chain_n21/zero_mode_t(2+0j)_ea0,2j_eb-0,2j.png
    :width: 45%
.. image:: ../TBfig/chain_n21/prop_t(2+0j)_ea0,2j_eb-0,2j.png
    :width: 45%

The infinite chain can be viewed as an insulator in the condensed-matter language (no gap between the negative and positive energies). Below the PT-symmetry breaking, the spectrum displays the particle-hole symmetry.

The zero mode is extended and uniformly distributed on the A sites. 


Identical hoppings with an impurity
--------------------------------------------------------


The impurity is modeled by changing two adjacent hoppings of a given site.

.. image:: ../TBfig/chain_n21/lat_hop_imp_t(2+0j)_ea0,1j_eb-0,1j.png
    :height: 80px
    :width:  100%
    :align: center


.. code-block:: python

    from chainTB import *
    tags = [b'a', b'b']
    ri = [[0, 0], [1, 0]]
    pv = [[2, 0], [2, 0]]
    on = [0.1j, -0.1j]
    n = 21
    ta = 2.
    chain_tb = latticeTB(tags=tags, ri=ri, pv=pv)
    chain_tb.get_lattice(nx=n, ny=1)
    # solve eigenvalue problem
    eig_chain = eigChain(lat=chain_tb)
    eig_chain.set_onsite(on=on)
    eig_chain.set_hop(ta=ta)
    eig_chain.set_hop_def([[9, 10], [10, 11]], [1., 1.])
    eig_chain.get_ham()
    eig_chain.get_eig()
    zero_mode = eig_chain.get_state_pola(b'a')
    # plots
    plot_chain = plotChain(sys=eig_chain)
    fig_lat_hop = plot_chain.plt_chain_hop(ms=15, fs=20)
    fig_spec = plot_chain.plt_spec(ms=20, pola_tag=b'a')
    fig_zero_mode = plot_chain.plt_intensity1d(zero_mode, ms=20)
    #propagation
    prop_chain = propagationTB(coor=eig_chain.coor, steps=1400, dz=0.1)
    psi_init =  np.ones(eig_chain.sites) / np.sqrt(eig_chain.sites)
    psi_init =  np.zeros(eig_chain.sites)
    psi_init[eig_chain.sites//2] = 1.
    prop_chain.get_prop(ham=eig_chain.ham, psi_init=psi_init, norm=True)
    fig_prop = prop_chain.plt_prop1d()
    # save figures
    save_chain = saveFigTB(sys=eig_chain, hop_tags=['t'], hop=[ta], dir_name='chain', ext='png')
    save_chain.save_fig(fig_lat_hop, 'lat_hop_imp')
    save_chain.save_fig(fig_spec, 'spec_imp')
    save_chain.save_fig(fig_zero_mode, 'zero_mode_imp')
    save_chain.save_fig(fig_prop, 'prop_imp')

.. image:: ../TBfig/chain_n21/spec_imp_t(2+0j)_ea0,1j_eb-0,1j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/zero_mode_imp_t(2+0j)_ea0,1j_eb-0,1j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/prop_imp_t(2+0j)_ea0,1j_eb-0,1j.png
        :align: center
        :width: 65%

The zero mode is an extended state with maximal amplitude on the impurity site.

Alternating hoppings
--------------------------------------------------------

.. image:: ../TBfig/chain_n21/lat_hop_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
    :height: 80px
    :width: 100%
    :align: center

.. code-block:: python
    
    from chainTB import *
    # lattice
    tags = [b'a', b'b']
    ri = [[0, 0], [1, 0]]
    pv = [[2, 0], [2, 0]]
    on = [0.2j, -0.2j]
    ta, tb = 2., 1.
    n = 21
    ta = 2.
    chain_tb = latticeTB(tags=tags, ri=ri, pv=pv)
    chain_tb.get_lattice(nx=n, ny=1)
    # solve eigenvalue problem
    eig_chain = eigChain(lat=chain_tb)
    eig_chain.set_onsite(on=on)
    eig_chain.set_hop(ta=ta, tb=tb)
    eig_chain.get_ham()
    eig_chain.get_eig()
    zero_mode = eig_chain.get_state_pola(b'a')
    # plots
    plot_chain = plotChain(sys=eig_chain)
    fig_dispersion = plot_chain.plt_dispersion(ta=ta, tb=tb)
    fig_lat_hop = plot_chain.plt_chain_hop(ms=15, fs=20)
    fig_spec = plot_chain.plt_spec(ms=20, pola_tag=b'a')
    fig_zero_mode = plot_chain.plt_intensity1d(zero_mode, ms=20)
    #propagation
    prop_chain = propagationTB(coor=eig_chain.coor, steps=1400, dz=0.05)
    psi_init =  np.ones(eig_chain.sites) / np.sqrt(eig_chain.sites)
    prop_chain.get_prop(ham=eig_chain.ham, psi_init=psi_init, norm=True)
    fig_prop = prop_chain.plt_prop1d()
    # save figures
    save_chain = saveFigTB(sys=eig_chain, hop_tags=['ta', 'tb'], hop=[ta, tb], dir_name='chain', ext='png')
    save_chain.save_fig(fig_dispersion, 'dispersion')
    save_chain.save_fig(fig_lat_hop, 'lat_hop')
    save_chain.save_fig(fig_spec, 'spec')
    save_chain.save_fig(fig_zero_mode, 'zero_mode')
    save_chain.save_fig(fig_prop, 'prop')


.. image:: ../TBfig/chain_n21/dispersion_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/spec_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/zero_mode_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/prop_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :width: 45%

The infinite chain can be viewed as an isolator in the condensed-matter language (gap between the negative and positive energies). As in the identical hoppings case, the spectrum (blue dots) displays the particle-hole symmetry, the eigenenergies can be written s :math:`\pm |E_n|`.

In the finte case, the zero-mode is exponentially localized at one edge of the chain (the edge terminating with a weak coupling). The zero-mode is known as a Shockley state.

Dimerization defect
----------------------------

Without disorder
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. image:: ../TBfig/chain_n21/lat_hop_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
    :height: 80px
    :width: 100%
    :align: center

.. code-block:: python

    from chainTB import *
    #lattice
    ta, tb = 2., 1.
    n = 21
    ta = 2.
    chain_tb = latticeTB(tags=tags, ri=ri, pv=pv)
    chain_tb.get_lattice(nx=n, ny=1)
    chain_tb.plt_lattice(plt_label=True, ms=15, fs=20)
    # solve eigenvalue problem
    eig_chain = eigChain(lat=chain_tb)
    eig_chain.set_onsite(on=on)
    eig_chain.set_hop(ta=ta, tb=tb)
    eig_chain.set_dim_defect(n//2)
    eig_chain.get_ham()
    eig_chain.get_eig()
    zero_mode = eig_chain.get_state_pola(b'a')
    # plots
    plot_chain = plotChain(sys=eig_chain)
    fig_lat_hop = plot_chain.plt_chain_hop(ms=10)
    fig_spec = plot_chain.plt_spec(ms=20, pola_tag=b'a')
    fig_zero_mode = plot_chain.plt_intensity1d(zero_mode, ms=20)
    #propagation
    prop_chain = propagationTB(coor=eig_chain.coor, steps=1400, dz=0.05)
    psi_init =  np.ones(eig_chain.sites) / np.sqrt(eig_chain.sites)
    prop_chain.get_prop(ham=eig_chain.ham, psi_init=psi_init, norm=True)
    fig_prop = prop_chain.plt_prop1d()
    # save figures
    save_chain = saveFigTB(sys=eig_chain, hop_tags=['ta', 'tb'], hop=[ta, tb], dir_name='chain', ext='png')
    save_chain.save_fig(fig_lat_hop, 'lat_hop_dim')
    save_chain.save_fig(fig_spec, 'spec_dim')
    save_chain.save_fig(fig_zero_mode, 'zero_mode_dim')
    save_chain.save_fig(fig_prop, 'prop_dim')


.. image:: ../TBfig/chain_n21/spec_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/zero_mode_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :width: 45%
.. image:: ../TBfig/chain_n21/prop_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j.png
        :align: center
        :width: 65%


The zero-mode is exponentially localized at the defect.

with disorder
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^


.. image:: ../TBfig/chain_n21/lat_hop_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j_d_h_0,95.png
    :height: 80px
    :width: 100%
    :align: center

.. code-block:: python

        from chainTB import *
        #lattice
        ta, tb = 2., 1.
        n = 21
        ta = 2.
        chain_tb = latticeTB(tags=tags, ri=ri, pv=pv)
        chain_tb.get_lattice(nx=n, ny=1)
        chain_tb.plt_lattice(plt_label=True, ms=15, fs=20)
        # solve eigenvalue problem
        eig_chain = eigChain(lat=chain_tb)
        eig_chain.set_onsite(on=on)
        eig_chain.set_hop(ta=ta, tb=tb)
        eig_chain.set_dim_defect(n//2)
        eig_chain.set_disorder(0.5)
        eig_chain.get_ham()
        eig_chain.get_eig()
        zero_mode = eig_chain.get_state_pola(b'a')
        # plots
        plot_chain = plotChain(sys=eig_chain)
        fig_lat_hop = plot_chain.plt_chain_hop(ms=10)
        fig_spec = plot_chain.plt_spec(ms=20, pola_tag=b'a')
        fig_zero_mode = plot_chain.plt_intensity1d(zero_mode, ms=20)
        #propagation
        prop_chain = propagationTB(coor=eig_chain.coor, steps=1400, dz=0.05)
        psi_init =  np.ones(eig_chain.sites) / np.sqrt(eig_chain.sites)
        prop_chain.get_prop(ham=eig_chain.ham, psi_init=psi_init, norm=True)
        fig_prop = prop_chain.plt_prop1d()
        # save figures
        save_chain = saveFigTB(sys=eig_chain, hop_tags=['ta', 'tb'], hop=[ta, tb], dir_name='chain', ext='png')
        save_chain.save_fig(fig_lat_hop, 'lat_hop_dim')
        save_chain.save_fig(fig_spec, 'spec_dim')
        save_chain.save_fig(fig_zero_mode, 'zero_mode_dim')
        save_chain.save_fig(fig_prop, 'prop_dim')


.. image:: ../TBfig/chain_n21/spec_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j_d_h_0,95.png
        :width: 45%
.. image:: ../TBfig/chain_n21/zero_mode_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j_d_h_0,95.png
        :width: 45%
.. image:: ../TBfig/chain_n21/prop_dim_ta(2+0j)_tb(1+0j)_ea0,2j_eb-0,2j_d_h_0,95.png
        :align: center
        :width: 65%

The zero-mode is robust to disorder and in the gap i.e. the zero-mode is topologically protected. It has been first discover by Jackiw and Rebbin in field theory (1976) and few years later by Su, Schrieffer, and Heeger (1979) in condensed-matter.

Adiabatic pumping
----------------------------

Change of hopping configuation continuously.  

Visit three different hopping configurations:

.. code-block:: python

    from chainTB import *
    #lattice
    tags = [b'a', b'b']
    ri = [[0, 0], [1, 0]]
    pv = [[2, 0], [2, 0]]
    on = [0.1j, -0.1j]
    ta, tb = 2.5, 1.
    n = 21
    chain_tb = latticeTB(tags=tags, ri=ri, pv=pv)
    chain_tb.get_lattice(nx=n, ny=1)
    chain_tb.plt_lattice(plt_label=True, ms=15, fs=20)
    # solve eigenvalue problem
    eig_chain = eigChain(lat=chain_tb)
    eig_chain.set_onsite(on=on)
    eig_chain.set_hop(ta=ta, tb=tb)
    eig_chain.set_dim_defect(16)
    eig_chain.get_ham()
    ham1 = np.copy(eig_chain.ham)
    eig_chain.set_dim_defect(16)
    eig_chain.set_hop(ta=ta, tb=tb)
    eig_chain.set_dim_defect(4)
    eig_chain.get_ham()
    ham2 = np.copy(eig_chain.ham)
    eig_chain.set_hop(ta=ta, tb=tb)
    eig_chain.set_dim_defect(10)
    eig_chain.get_ham()
    ham3 = np.copy(eig_chain.ham)
    hams = np.array([ham1, ham2, ham2, ham3, ham3])
    prop_chain = propagationTB(coor=eig_chain.coor, steps=1000, dz=0.2)
    psi_init =  np.zeros(eig_chain.sites) 
    psi_init[16] = 0.5
    prop_chain.get_pump(hams=hams, psi_init=psi_init)
    fig_pump = prop_chain.plt_prop1d()
    # save figures
    save_chain = saveFigTB(sys=eig_chain, hop_tags=['ta', 'tb'], hop=[ta, tb], dir_name='chain', ext='png')
    save_chain.save_fig(fig_pump, 'pumping')

.. image:: ../TBfig/chain_n21/pumping_ta(2,5+0j)_tb(1+0j)_ea0,1j_eb-0,1j.png
        :width: 90%
        :align: center
